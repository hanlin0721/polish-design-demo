/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei";
import { useEffect, useState } from "react";
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import useControl from "../../store/useControl.js";
import gsap from "gsap";
import appStore from "../../store/store.js";

export default function City(props) {
    const group = useRef();
    const polishManRef = useRef()
    const polishManModeTwoGroupRef = useRef()
    const polishManModeTwoRef = useRef()
    const buildingRef = useRef()
    const floorRef = useRef()

    const [smoothCameraPosition] = useState(() => new THREE.Vector3())
    const [smoothCameraTarget] = useState(() => new THREE.Vector3())

    const { nodes, animations } = useGLTF("./city.glb")

    const { actions } = useAnimations(animations, group);

    const bakedBaseTexture = useTexture('./base.png')
    bakedBaseTexture.flipY = false

    const bakedArcTexture = useTexture('./arc.png')
    bakedArcTexture.flipY = false

    const bakedPolishManTexture = useTexture('./14.jpg')
    bakedPolishManTexture.flipY = false

    const [scene, setScene] = useState(1)

    useEffect(() => {
        const unsubscribeReset = useControl.subscribe(
            (state) => state.scene,
            (value) => {
                console.log(value)
                if (value === 1) {
                    setScene(() => 1)
                    appStore.scene = 1

                    gsap.to(buildingRef.current.material, {
                        opacity: 1,
                    })
                }
                if (value === 2) {
                    appStore.scene = 2
                    setScene(() => 2)

                    gsap.to(buildingRef.current.material, {
                        opacity: 0,
                    })
                }
                if (value === 3) {
                    setScene(() => 3)
                    appStore.scene = 3

                    gsap.to(buildingRef.current.material, {
                        opacity: 1,
                    })
                }
            }
        )

        actions.Animation.play()

        return () => {
            unsubscribeReset()
        }
    }, [])

    useFrame((state, delta) => {
        polishManModeTwoRef.current.geometry.center()
        polishManModeTwoRef.current.rotation.y += 0.02

        let cameraPosition
        let cameraTarget

        if (scene === 1 || scene === 3) {
            cameraPosition = new THREE.Vector3(-1, 2, -1)
            cameraPosition.applyQuaternion(polishManRef.current.quaternion)
            cameraPosition.add(new THREE.Vector3(
                polishManRef.current.position.x,
                polishManRef.current.position.y,
                polishManRef.current.position.z,
            ))

            cameraTarget = new THREE.Vector3(
                polishManRef.current.position.x,
                polishManRef.current.position.y,
                polishManRef.current.position.z
            )
            cameraTarget.add(new THREE.Vector3(
                polishManRef.current.position.x * 0.1 + state.pointer.x * 0.01,
                polishManRef.current.position.y * 0.1 + state.pointer.y * 0.005,
                polishManRef.current.position.z * 0.1,
            ))
        }

        if (scene === 2) {
            cameraPosition = new THREE.Vector3(
                polishManModeTwoGroupRef.current.position.x + 0,
                polishManModeTwoGroupRef.current.position.y + 0,
                polishManModeTwoGroupRef.current.position.z + 0.3
            )
            cameraTarget = new THREE.Vector3(
                polishManModeTwoGroupRef.current.position.x - 0.1,
                polishManModeTwoGroupRef.current.position.y,
                polishManModeTwoGroupRef.current.position.z + 0
            )
        }

        smoothCameraPosition.lerp(cameraPosition, 5 * delta)
        smoothCameraTarget.lerp(cameraTarget, 5 * delta)

        state.camera.position.copy(smoothCameraPosition)
        state.camera.lookAt(smoothCameraTarget)
    })

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <mesh
                    ref={buildingRef}
                    name="ARC"
                    castShadow
                    receiveShadow
                    geometry={nodes.ARC.geometry}
                    material={nodes.ARC.material}
                    position={[-7.9, 0.18, 5.37]}
                >
                    <meshBasicMaterial map={bakedArcTexture} transparent={true} />
                </mesh>
                <mesh
                    ref={floorRef}
                    name="BASE"
                    castShadow
                    receiveShadow
                    geometry={nodes.BASE.geometry}
                    material={nodes.BASE.material}
                    position={[-7.51, 0.28, 3.59]}
                >
                    <meshBasicMaterial
                        map={scene === 2 ? bakedBaseTexture : null}
                        color={scene === 2 ? "#fff" : null}
                    />
                </mesh>
                <mesh
                    ref={polishManRef}
                    name="polish-man001"
                    castShadow
                    receiveShadow
                    geometry={nodes["polish-man001"].geometry}
                    material={nodes["polish-man001"].material}
                    rotation={[0, -Math.PI / 6, 0]}
                    scale={0.14}
                />
                <group
                    ref={polishManModeTwoGroupRef}
                    position={[-0.8, 0.1, 1.6]}
                    rotation={[0.6, -0.4, 0.35]}
                >
                    <mesh
                        ref={polishManModeTwoRef}
                        name="polish-man002"
                        // castShadow
                        // receiveShadow
                        geometry={nodes["polish-man001"].geometry}
                        material={nodes["polish-man001"].material}
                        // rotation={[0, 0, 0]}
                        scale={0.14}
                    // position={[-0.8, 0.1, 1.6]}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("./city.glb");
